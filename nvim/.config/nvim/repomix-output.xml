<repomix>This file is a merged representation of a subset of the codebase, containing specifically included files and files not matching ignore patterns, combined into a single document by Repomix.
The content has been processed where comments have been removed, content has been formatted for parsing in xml style.<file_summary>This section contains a summary of this file.<purpose>This file contains a packed representation of the entire repository&apos;s contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.</purpose><file_format>The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Repository files, each consisting of:
  - File path as an attribute
  - Full contents of the file</file_format><usage_guidelines>- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.</usage_guidelines><notes>- Some files may have been excluded based on .gitignore rules and Repomix&apos;s configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Only files matching these patterns are included: **/*
- Files matching these patterns are excluded: tmp/, **/.vscode/**, *.log, Glove_Code/lib/speech_recognition_inferencing/, Glove_Code/lib/MPU6050/
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded
- Code comments have been removed from supported file types
- Content has been formatted for parsing in xml style
- Files are sorted by Git change count (files with more changes are at the bottom)</notes><additional_info></additional_info></file_summary><directory_structure>after/
  ftplugin/
    markdown.lua
    python.lua
    typescriptreact.lua
lua/
  config/
    core/
      autocmds.lua
      keymaps.lua
      options.lua
  plugins/
    autopairs.lua
    avante.lua
    code-context.lua
    colorizer.lua
    completion.lua
    filetree.lua
    format.lua
    harpoon.lua
    hop.lua
    image-support.lua
    init.lua
    lsp.lua
    lualine.lua
    mini.lua
    render-markdown.lua
    snacks.lua
    telescope.lua
    theme.lua
    treesitter.lua
    trouble.lua
    undotree.lua
    vim.maximizer.lua
  lazy_setup.lua
plugin/
  floaterminal.lua
init.lua
lazy-lock.json</directory_structure><files>This section contains the contents of the repository&apos;s files.<file path="after/ftplugin/markdown.lua">local set = vim.opt_local

set.textwidth = 80 -- Wrap text at 80 characters
set.spell = true -- Enable spell checking
set.linebreak = true
set.number = false
set.relativenumber = false

-- added extra highlights for markdown files to render highlights properly
-- thx to Linkarzu

local color1_bg = &quot;#ff757f&quot;
local color2_bg = &quot;#4fd6be&quot;
local color3_bg = &quot;#7dcfff&quot;
local color4_bg = &quot;#ff9e64&quot;
local color5_bg = &quot;#7aa2f7&quot;
local color6_bg = &quot;#c0caf5&quot;
local color_fg = &quot;#1F2335&quot;

vim.cmd(
  string.format([[highlight @markup.heading.1.markdown cterm=bold gui=bold guifg=%s guibg=%s]], color_fg, color1_bg)
)
vim.cmd(
  string.format([[highlight @markup.heading.2.markdown cterm=bold gui=bold guifg=%s guibg=%s]], color_fg, color2_bg)
)
vim.cmd(
  string.format([[highlight @markup.heading.3.markdown cterm=bold gui=bold guifg=%s guibg=%s]], color_fg, color3_bg)
)
vim.cmd(
  string.format([[highlight @markup.heading.4.markdown cterm=bold gui=bold guifg=%s guibg=%s]], color_fg, color4_bg)
)
vim.cmd(
  string.format([[highlight @markup.heading.5.markdown cterm=bold gui=bold guifg=%s guibg=%s]], color_fg, color5_bg)
)
vim.cmd(
  string.format([[highlight @markup.heading.6.markdown cterm=bold gui=bold guifg=%s guibg=%s]], color_fg, color6_bg)
)</file><file path="after/ftplugin/python.lua">local set = vim.opt_local

set.tabstop = 4
set.shiftwidth = 4
set.softtabstop = 4
set.expandtab = true</file><file path="after/ftplugin/typescriptreact.lua">local set = vim.opt_local

set.tabstop = 2
set.shiftwidth = 2
set.softtabstop = 2
set.expandtab = true</file><file path="lua/config/core/autocmds.lua">-- AutoCommands

-- See `:help vim_highlight.on_yank()`
vim.api.nvim_create_autocmd(&quot;TextYankPost&quot;, {
	desc = &quot;Highlight when yanking (copying) text&quot;,
	group = vim.api.nvim_create_augroup(&quot;kickstart-highlight-yank&quot;, { clear = true }),
	callback = function()
		vim.highlight.on_yank()
	end,
})

vim.api.nvim_create_autocmd(&quot;TermOpen&quot;, {
	group = vim.api.nvim_create_augroup(&quot;custom-term-open&quot;, { clear = true }),
	callback = function()
		vim.opt.number = false
		vim.opt.relativenumber = false
	end,
})

vim.api.nvim_create_augroup(&quot;BashSheBang&quot;, { clear = true })
vim.api.nvim_create_autocmd({ &quot;BufRead&quot;, &quot;BufNewFile&quot; }, {
	group = &quot;BashSheBang&quot;,
	callback = function(args)
		local lines = vim.api.nvim_buf_get_lines(args.buf, 0, 1, false) or &quot;&quot;

		if #lines &gt; 0 then
			local first_line = lines[1]
			if string.match(first_line, &quot;^#!.*[ /]bash&quot;) or string.match(first_line, &quot;^#!.*[ /]sh&quot;) then
				vim.bo[args.buf].filetype = &quot;sh&quot;
			end
		end
	end,
})</file><file path="lua/config/core/keymaps.lua">-- Keymaps
local opts = { noremap = true, silent = true }

vim.keymap.set(&quot;n&quot;, &quot;&lt;space&gt;&lt;space&gt;x&quot;, &quot;&lt;cmd&gt;source %&lt;CR&gt;&quot;) -- Source File
vim.keymap.set(&quot;n&quot;, &quot;&lt;C-s&gt;&quot;, &quot;:write&lt;CR&gt;&quot;) -- Save file with CTRL + S
vim.keymap.set(&quot;n&quot;, &quot;&lt;C-c&gt;&quot;, &quot;:%y&lt;CR&gt;&quot;, opts) -- Copy all lines in buffer

-- Moves Lines
vim.keymap.set(&quot;v&quot;, &quot;J&quot;, &quot;:m &apos;&gt;+1&lt;CR&gt;gv=gv&quot;, { desc = &quot;moves lines down in visual selection&quot; })
vim.keymap.set(&quot;v&quot;, &quot;K&quot;, &quot;:m &apos;&lt;-2&lt;CR&gt;gv=gv&quot;, { desc = &quot;moves lines up in visual selection&quot; })

-- Navigations
vim.keymap.set(&quot;n&quot;, &quot;&lt;C-d&gt;&quot;, &quot;&lt;C-d&gt;zz&quot;, { desc = &quot;move down in buffer with cursor centered&quot; })
vim.keymap.set(&quot;n&quot;, &quot;&lt;C-u&gt;&quot;, &quot;&lt;C-u&gt;zz&quot;, { desc = &quot;move up in buffer with cursor centered&quot; })

vim.keymap.set(&quot;n&quot;, &quot;n&quot;, &quot;nzzzv&quot;) -- Center Cursor when navigating with n
vim.keymap.set(&quot;n&quot;, &quot;N&quot;, &quot;Nzzzv&quot;)

-- Navigations (Hop Plugin)
vim.keymap.set(&quot;n&quot;, &quot;&lt;C-f&gt;&quot;, &quot;:HopWord&lt;CR&gt;&quot;, { desc = &quot;move down in buffer with cursor centered&quot; })

-- Harpoon
local harpoon = require(&quot;harpoon&quot;)
local fidget = require(&quot;fidget&quot;)

-- Add Harpoon Mark
vim.keymap.set(&quot;n&quot;, &quot;&lt;leader&gt;a&quot;, function()
	local fname = vim.fn.expand(&quot;%:t&quot;) -- current file name
	-- Notify
	fidget.notify(&quot;Added &quot; .. fname .. &quot; Harpoon&quot;, vim.log.levels.INFO)

	harpoon:list():add()
end)

-- Remove Harpoon Mark
vim.keymap.set(&quot;n&quot;, &quot;&lt;leader&gt;r&quot;, function()
	local fname = vim.fn.expand(&quot;%:t&quot;) -- current file name
	-- Notify
	fidget.notify(&quot;Removed &quot; .. fname .. &quot; Harpoon&quot;, vim.log.levels.WARN)

	harpoon:list():remove()
end)

-- Open Harpoon List with telescope
vim.keymap.set(&quot;n&quot;, &quot;&lt;C-e&gt;&quot;, function()
	-- basic telescope configuration
	local conf = require(&quot;telescope.config&quot;).values
	local ivy = require(&quot;telescope.themes&quot;).get_ivy

	local function toggle_telescope(harpoon_files)
		local file_paths = {}
		for _, item in ipairs(harpoon_files.items) do
			table.insert(file_paths, item.value)
		end

		require(&quot;telescope.pickers&quot;)
			.new(
				{},
				ivy({
					prompt_title = &quot;Harpoon&quot;,
					finder = require(&quot;telescope.finders&quot;).new_table({
						results = file_paths,
					}),
					previewer = conf.file_previewer({}),
					sorter = conf.generic_sorter({}),
				})
			)
			:find()
	end

	toggle_telescope(harpoon:list())
end)

-- Toggle next in harpoon list (wrap)
vim.keymap.set(&quot;n&quot;, &quot;&lt;C-V&gt;&quot;, function()
	harpoon:list():next({
		ui_nav_wrap = true,
	})
end)

-- ctrl c as escape cuz Im lazy to reach up to the esc key
vim.keymap.set(&quot;i&quot;, &quot;&lt;C-c&gt;&quot;, &quot;&lt;Esc&gt;&quot;)
vim.keymap.set(&quot;n&quot;, &quot;&lt;Esc&gt;&quot;, &quot;:nohl&lt;CR&gt;&quot;, { desc = &quot;Clear search hl&quot;, silent = true })

-- prevent x delete from registering when next paste
vim.keymap.set(&quot;n&quot;, &quot;x&quot;, &apos;&quot;_x&apos;, opts)

-- Diagnostics

-- Toggle LSP diagnostics visibility
local isLspDiagnosticsVisible = true
vim.keymap.set(&quot;n&quot;, &quot;&lt;C-x&gt;&quot;, function()
	isLspDiagnosticsVisible = not isLspDiagnosticsVisible
	vim.diagnostic.config({
		virtual_text = isLspDiagnosticsVisible,
		underline = isLspDiagnosticsVisible,
	})
end, { desc = &quot;Toggle LSP diagnostics&quot; })
vim.keymap.set(&quot;n&quot;, &quot;&lt;leader&gt;dl&quot;, vim.diagnostic.setloclist, { desc = &quot;Open diagnostics list (location)&quot; })
vim.keymap.set(&quot;n&quot;, &quot;&lt;leader&gt;dq&quot;, vim.diagnostic.setqflist, { desc = &quot;Open diagnostics list (quickfix)&quot; })

-- LSP
vim.keymap.set(&quot;n&quot;, &quot;gd&quot;, vim.lsp.buf.definition, { desc = &quot;LSP Go To Definition&quot; })
vim.keymap.set(&quot;n&quot;, &quot;gr&quot;, vim.lsp.buf.references, { desc = &quot;LSP Code Action&quot; })
vim.keymap.set(&quot;n&quot;, &quot;&lt;space&gt;ga&quot;, vim.lsp.buf.code_action, { desc = &quot;LSP Code Action&quot; })

-- Navbuddy
local navbuddy = require(&quot;nvim-navbuddy&quot;)
vim.keymap.set(&quot;n&quot;, &quot;&lt;space&gt;sd&quot;, navbuddy.open, { desc = &quot;Nav Buddy&quot; })

-- Telescope
local builtin = require(&quot;telescope.builtin&quot;)
vim.keymap.set(&quot;n&quot;, &quot;grr&quot;, builtin.lsp_references, { desc = &quot;Find references&quot; })
vim.keymap.set(&quot;n&quot;, &quot;&lt;space&gt;sw&quot;, builtin.lsp_dynamic_workspace_symbols, { desc = &quot;Dynamic Workspace Symbols&quot; })
vim.keymap.set(&quot;n&quot;, &quot;&lt;space&gt;fh&quot;, builtin.help_tags, { desc = &quot;Find help tags&quot; })
vim.keymap.set(&quot;n&quot;, &quot;&lt;space&gt;ff&quot;, builtin.find_files, { desc = &quot;Find files&quot; })
vim.keymap.set(&quot;n&quot;, &quot;&lt;space&gt;fo&quot;, builtin.oldfiles, { desc = &quot;Find old files&quot; })
vim.keymap.set(&quot;n&quot;, &quot;&lt;space&gt;fj&quot;, builtin.jumplist, { desc = &quot;Find jump list&quot; })
vim.keymap.set(&quot;n&quot;, &quot;&lt;space&gt;fw&quot;, builtin.live_grep, { desc = &quot;Live Grep&quot; })

-- Telescope to Neovim Config Files
vim.keymap.set(&quot;n&quot;, &quot;&lt;space&gt;en&quot;, function()
	require(&quot;telescope.builtin&quot;).find_files({
		cwd = vim.fn.stdpath(&quot;config&quot;),
	})
end)

-- Terminals
vim.keymap.set(&quot;n&quot;, &quot;&lt;space&gt;st&quot;, function()
	vim.cmd.vnew()
	vim.cmd.term()
	vim.cmd.wincmd(&quot;J&quot;)
	vim.api.nvim_win_set_height(0, 5)
end, { desc = &quot;Open small terminal at bottom&quot; })</file><file path="lua/config/core/options.lua">-- Configs
vim.opt.shiftwidth = 2 -- Or your preferred number of spaces
vim.opt.tabstop = 2 -- It&apos;s also common to set tabstop to the same value
vim.opt.expandtab = true -- Ensure tabs are converted to spaces
vim.opt.clipboard = &quot;unnamedplus&quot; -- Allow system clipboards
vim.opt.number = true
vim.opt.relativenumber = true
vim.opt.helpheight = 0
vim.opt.laststatus = 3

-- disable netrw at the very start of your init.lua
vim.g.loaded_netrw = 1
vim.g.loaded_netrwPlugin = 1

-- optionally enable 24-bit colour
vim.opt.termguicolors = true

-- Diagnostics
vim.diagnostic.config({
	-- Show signs in the gutter
	signs = {
		active = true,
		-- text = {
		--   [vim.diagnostic.severity.ERROR] = &quot;&quot;, -- Icon for Error
		--   [vim.diagnostic.severity.WARN] = &quot;&quot;, -- Icon for Warning
		--   [vim.diagnostic.severity.INFO] = &quot;&quot;, -- Icon for Info
		--   [vim.diagnostic.severity.HINT] = &quot;&quot;, -- Icon for Hint
		-- },
	}, -- or a table to customize (see below)

	-- Show virtual text (inline messages)
	virtual_text = true, -- or a table to customize (see below)

	-- Underline the diagnostic&apos;d text
	underline = true,

	-- Update diagnostics in insert mode (can be distracting for some)
	update_in_insert = false,

	-- Sort diagnostics by severity
	severity_sort = true,

	-- Configure the floating window for diagnostics (e.g., when using vim.diagnostic.open_float())
	float = {
		focusable = false, -- Whether the float window can receive focus
		style = &quot;minimal&quot;, -- &quot;minimal&quot; or &quot;border&quot; (deprecated in favor of border option)
		border = &quot;rounded&quot;, -- &quot;none&quot;, &quot;single&quot;, &quot;double&quot;, &quot;rounded&quot;, &quot;solid&quot;, &quot;shadow&quot;
		source = &quot;always&quot;, -- &quot;always&quot;, &quot;if_many&quot; (show source only if multiple sources) or false
		header = &quot;&quot;, -- Text to put at the top of the float
		prefix = &quot;&quot;, -- Text to put before each diagnostic in the float
		-- scope = &quot;cursor&quot;, -- &quot;cursor&quot;, &quot;line&quot;, &quot;buffer&quot; (for vim.diagnostic.open_float)
	},
})</file><file path="lua/plugins/autopairs.lua">return {
  {
    &quot;windwp/nvim-autopairs&quot;,
    event = &quot;InsertEnter&quot;,
    dependencies = {
      &quot;saghen/blink.cmp&quot;,
    },
    config = true,
    -- use opts = {} for passing setup options
    -- this is equivalent to setup({}) function
  },
}</file><file path="lua/plugins/avante.lua">return {
	&quot;yetone/avante.nvim&quot;,
	-- if you want to build from source then do `make BUILD_FROM_SOURCE=true`
	-- ⚠️ must add this setting! ! !
	build = function()
		-- conditionally use the correct build system for the current OS
		if vim.fn.has(&quot;win32&quot;) == 1 then
			return &quot;powershell -ExecutionPolicy Bypass -File Build.ps1 -BuildFromSource false&quot;
		else
			return &quot;make&quot;
		end
	end,
	event = &quot;VeryLazy&quot;,
	version = false, -- Never set this value to &quot;*&quot;! Never!
	---@module &apos;avante&apos;
	opts = {
		-- add any opts here
		-- for example
		provider = &quot;gemini&quot;,
		auto_suggestions_provider = &quot;copilot&quot;,
		providers = {
			gemini = {
				endpoint = &quot;https://generativelanguage.googleapis.com/v1beta/models&quot;,
				model = &quot;gemini-2.5-pro&quot;,
				timeout = 30000, -- Timeout in milliseconds
				context_window = 1048576,
				use_ReAct_prompt = true,
				extra_request_body = {
					generationConfig = {
						temperature = 0.75,
					},
				},
			},
		},
	},
	dependencies = {
		&quot;nvim-lua/plenary.nvim&quot;,
		&quot;MunifTanjim/nui.nvim&quot;,
		--- The below dependencies are optional,
		&quot;echasnovski/mini.pick&quot;, -- for file_selector provider mini.pick
		&quot;nvim-telescope/telescope.nvim&quot;, -- for file_selector provider telescope
		&quot;hrsh7th/nvim-cmp&quot;, -- autocompletion for avante commands and mentions
		&quot;ibhagwan/fzf-lua&quot;, -- for file_selector provider fzf
		&quot;stevearc/dressing.nvim&quot;, -- for input provider dressing
		&quot;folke/snacks.nvim&quot;, -- for input provider snacks
		&quot;nvim-tree/nvim-web-devicons&quot;, -- or echasnovski/mini.icons
		&quot;zbirenbaum/copilot.lua&quot;, -- for providers=&apos;copilot&apos;
		{
			-- support for image pasting
			&quot;HakonHarnes/img-clip.nvim&quot;,
			event = &quot;VeryLazy&quot;,
			opts = {
				-- recommended settings
				default = {
					embed_image_as_base64 = false,
					prompt_for_file_name = false,
					drag_and_drop = {
						insert_mode = true,
					},
					-- required for Windows users
					use_absolute_path = true,
				},
			},
		},
		{
			-- Make sure to set this up properly if you have lazy=true
			&quot;MeanderingProgrammer/render-markdown.nvim&quot;,
			opts = {
				file_types = { &quot;markdown&quot;, &quot;Avante&quot; },
			},
			ft = { &quot;markdown&quot;, &quot;Avante&quot; },
		},
	},
}</file><file path="lua/plugins/code-context.lua">return {
	&quot;nvim-treesitter/nvim-treesitter-context&quot;,
	dependencies = { &quot;nvim-treesitter/nvim-treesitter&quot; },
	opts = {
		enable = true, -- Enable this plugin (Can be enabled/disabled later via commands)
		multiwindow = false, -- Enable multiwindow support.
		max_lines = 0, -- How many lines the window should span. Values &lt;= 0 mean no limit.
		min_window_height = 0, -- Minimum editor window height to enable context. Values &lt;= 0 mean no limit.
		line_numbers = true,
		multiline_threshold = 30, -- Maximum number of lines to show for a single context
		trim_scope = &quot;outer&quot;, -- Which context lines to discard if `max_lines` is exceeded. Choices: &apos;inner&apos;, &apos;outer&apos;
		mode = &quot;cursor&quot;, -- Line used to calculate context. Choices: &apos;cursor&apos;, &apos;topline&apos;
		-- Separator between context and content. Should be a single character string, like &apos;-&apos;.
		-- When separator is set, the context will only show up when there are at least 2 lines above cursorline.
		separator = nil,
		zindex = 20, -- The Z-index of the context window
		on_attach = nil, -- (fun(buf: integer): boolean) return false to disable attaching
	},
}</file><file path="lua/plugins/colorizer.lua">return {
	{
		&quot;norcalli/nvim-colorizer.lua&quot;,
		config = function()
			require(&quot;colorizer&quot;).setup()
		end,
	},
}</file><file path="lua/plugins/completion.lua">return {
	{
		&quot;saghen/blink.cmp&quot;,
		-- optional: provides snippets for the snippet source
		dependencies = {
			&quot;Kaiser-Yang/blink-cmp-avante&quot;,
			&quot;rafamadriz/friendly-snippets&quot;,
			&quot;L3MON4D3/LuaSnip&quot;,
			&quot;nvim-tree/nvim-web-devicons&quot;,
			&quot;onsails/lspkind.nvim&quot;,
		},

		version = &quot;1.*&quot;,

		---@module &apos;blink.cmp&apos;
		---@type blink.cmp.Config
		opts = {

			keymap = {
				preset = &quot;super-tab&quot;,
			},

			appearance = {
				nerd_font_variant = &quot;mono&quot;,
			},

			-- (Default) Only show the documentation popup when manually triggered
			completion = { -- Define &apos;completion&apos; as a key
				documentation = {
					auto_show = true,
					-- Delay before showing the documentation window
					auto_show_delay_ms = 1000,
					-- Delay before updating the documentation window when selecting a new item,
					-- while an existing item is still visible
					update_delay_ms = 50,
				},
				menu = {
					draw = {
						columns = { { &quot;label&quot;, &quot;label_description&quot;, gap = 1 }, { &quot;kind_icon&quot;, &quot;kind&quot; } }, -- &apos;columns&apos; is a key in &apos;draw&apos;
						components = {
							kind_icon = {
								text = function(ctx)
									local icon = ctx.kind_icon
									if vim.tbl_contains({ &quot;Path&quot; }, ctx.source_name) then
										local dev_icon, _ = require(&quot;nvim-web-devicons&quot;).get_icon(ctx.label)
										if dev_icon then
											icon = dev_icon
										end
									else
										icon = require(&quot;lspkind&quot;).symbolic(ctx.kind, {
											mode = &quot;symbol&quot;,
										})
									end

									return icon .. ctx.icon_gap
								end,

								-- Optionally, use the highlight groups from nvim-web-devicons
								-- You can also add the same function for `kind.highlight` if you want to
								-- keep the highlight groups in sync with the icons.
								highlight = function(ctx)
									local hl = ctx.kind_hl
									if vim.tbl_contains({ &quot;Path&quot; }, ctx.source_name) then
										local dev_icon, dev_hl = require(&quot;nvim-web-devicons&quot;).get_icon(ctx.label)
										if dev_icon then
											hl = dev_hl
										end
									end
									return hl
								end,
							},
						},
					},
				},
			},
			signature = {
				enabled = true,
			},
			sources = {
				-- Add &apos;avante&apos; to the list
				default = { &quot;avante&quot;, &quot;lsp&quot;, &quot;buffer&quot;, &quot;snippets&quot;, &quot;path&quot; },
				providers = {
					avante = {
						module = &quot;blink-cmp-avante&quot;,
						name = &quot;Avante&quot;,
						opts = {
							-- options for blink-cmp-avante
						},
					},
				},
			},

			fuzzy = { implementation = &quot;prefer_rust_with_warning&quot; },
		},
		opts_extend = { &quot;sources.default&quot; },
	},
}</file><file path="lua/plugins/filetree.lua">return {
	&quot;nvim-tree/nvim-tree.lua&quot;,
	cmd = { &quot;NvimTreeToggle&quot;, &quot;NvimTreeFocus&quot; },
	config = function(_, opts)
		require(&quot;nvim-tree&quot;).setup(opts)
		local api = require(&quot;nvim-tree.api&quot;)
		vim.keymap.set(&quot;n&quot;, &quot;&lt;C-n&gt;&quot;, api.tree.toggle, { desc = &quot;&quot; })
	end,
	opts = {
		filters = { dotfiles = false },
		disable_netrw = true,
		hijack_cursor = true,
		sync_root_with_cwd = true,
		update_focused_file = {
			enable = true,
			update_root = false,
		},
		view = {
			side = &quot;right&quot;,
			width = 40,
			preserve_window_proportions = true,
		},
		renderer = {
			root_folder_label = false,
			highlight_git = true,
			indent_markers = { enable = true },
			icons = {
				glyphs = {
					default = &quot;󰈚&quot;,
					folder = {
						default = &quot;&quot;,
						empty = &quot;&quot;,
						empty_open = &quot;&quot;,
						open = &quot;&quot;,
						symlink = &quot;&quot;,
					},
					git = { unmerged = &quot;&quot; },
				},
			},
		},
	},
}</file><file path="lua/plugins/format.lua">return {
	-- In your lazy.nvim setup (e.g., lua/plugins/format.lua or similar)
	{
		&quot;stevearc/conform.nvim&quot;,
		event = { &quot;BufReadPre&quot;, &quot;BufNewFile&quot; }, -- Load early enough for format-on-save
		-- cmd = { &quot;ConformInfo&quot; }, -- You can use this if you prefer loading on command
		opts = {
			notify_on_error = true,
			-- Configure format on save
			format_on_save = {
				timeout_ms = 1000, -- Set a timeout for format on save
				lsp_fallback = true, -- Fallback to LSP formatting if conform.nvim doesn&apos;t have a formatter or fails
				-- If true, conform will try LSP formatting if its own formatters fail or aren&apos;t set up for the buffer.
				-- If you only want conform.nvim&apos;s defined formatters, set this to false.
			},
			-- Define your formatters by filetype
			formatters_by_ft = {
				lua = { &quot;stylua&quot; },
				python = { &quot;ruff_format&quot;, &quot;black&quot; }, -- Tries ruff_format first, then black
				javascript = { &quot;biome&quot;, &quot;prettierd&quot;, &quot;prettier&quot; }, -- prettierd is faster if available
				typescript = { &quot;biome&quot;, &quot;prettierd&quot;, &quot;prettier&quot; },
				javascriptreact = { &quot;biome&quot;, &quot;prettierd&quot;, &quot;prettier&quot; },
				typescriptreact = { &quot;biome&quot;, &quot;prettierd&quot;, &quot;prettier&quot; },
				json = { &quot;prettierd&quot;, &quot;prettier&quot; },
				yaml = { &quot;prettierd&quot;, &quot;prettier&quot; },
				markdown = { &quot;prettierd&quot;, &quot;prettier&quot; },
				html = { &quot;prettierd&quot;, &quot;prettier&quot; },
				css = { &quot;prettierd&quot;, &quot;prettier&quot; },
				scss = { &quot;prettierd&quot;, &quot;prettier&quot; },
				sh = { &quot;shfmt&quot; },
				go = { &quot;gofmt&quot;, &quot;goimports&quot; },
				php = { &quot;pint&quot; },
				rust = { &quot;rustfmt&quot; },

				-- Example of using a formatter that isn&apos;t a default
				-- zig = { &quot;zigfmt&quot; },

				-- You can also define a global fallback or a formatter for any filetype
				[&quot;_&quot;] = { &quot;trim_newlines&quot;, &quot;trim_whitespace&quot; }, -- Applies to all filetypes if no specific formatter is found / runs after specific ones
			},

			-- You can define custom formatters if needed
			-- formatters = {
			--   my_custom_formatter = {
			--     cmd = &quot;my_formatter_executable&quot;,
			--     args = { &quot;--stdin&quot; },
			--     stdin = true, -- Indicates the formatter reads from stdin
			--   }
			-- }
		},
		-- You can also put keymaps in init if you want them defined even earlier
		init = function()
			-- Set a keymap for manual formatting
			vim.keymap.set({ &quot;n&quot;, &quot;v&quot; }, &quot;&lt;leader&gt;fm&quot;, function() -- &quot;fm&quot; for &quot;manual format&quot;
				require(&quot;conform&quot;).format({ async = false, lsp_fallback = true, timeout_ms = 1000 })
				print(&quot;Formatted with conform.nvim&quot;)
			end, { desc = &quot;Format buffer with conform.nvim&quot; })
		end,
	},
}</file><file path="lua/plugins/harpoon.lua">return {
	{
		&quot;ThePrimeagen/harpoon&quot;,
		branch = &quot;harpoon2&quot;,
		dependencies = {
			&quot;nvim-lua/plenary.nvim&quot;,
			&quot;nvim-telescope/telescope.nvim&quot;,
		},
		config = function()
			local harpoon = require(&quot;harpoon&quot;)
			harpoon:setup()
		end,
	},
}</file><file path="lua/plugins/hop.lua">return {
	&quot;smoka7/hop.nvim&quot;,
	version = &quot;*&quot;,
	opts = {
		keys = &quot;etovxqpdygfblzhckisuran&quot;,
	},
}</file><file path="lua/plugins/image-support.lua">return {
  -- requires pngpaste ( brew install pngpaste )
  &quot;HakonHarnes/img-clip.nvim&quot;,
  event = &quot;VeryLazy&quot;,
  keys = {
    -- suggested keymap
    { &quot;&lt;leader&gt;pi&quot;, &quot;&lt;cmd&gt;PasteImage&lt;cr&gt;&quot;, desc = &quot;Paste image from system clipboard&quot; },
  },
  opts = {
    default = {
      insert_mode_after_paste = true,
      url_encode_path = true,
      template = &quot;$FILE_PATH&quot;,
      use_cursor_in_template = true,

      prompt_for_file_name = true,
      show_dir_path_in_prompt = true,

      use_absolute_path = false,
      relative_to_current_file = true,

      embed_image_as_base64 = false,
      max_base64_size = 10,

      dir_path = function()
        local cwd = vim.fn.getcwd()
        local vault_name = &quot;sethVault&quot; -- obsidian vault dir
        local vault_images_path = &quot;Archives/All-Vault-Images/&quot;

        if cwd:match(vault_name) then
          return vault_images_path
        else
          return &quot;assets&quot;
        end
      end,

      drag_and_drop = {
        enabled = true,
        insert_mode = true,
        copy_images = true,
        download_images = true,
      },
    },
    -- add options here
    -- or leave it empty to use the default settings
  },
}</file><file path="lua/plugins/init.lua">return {
	{
		&quot;folke/which-key.nvim&quot;,
		event = &quot;VeryLazy&quot;,
		opts = {
			-- your configuration comes here
			-- or leave it empty to use the default settings
			-- refer to the configuration section below
		},
		keys = {
			{
				&quot;&lt;leader&gt;?&quot;,
				function()
					require(&quot;which-key&quot;).show({ global = false })
				end,
				desc = &quot;Buffer Local Keymaps (which-key)&quot;,
			},
		},
	},
	{
		-- Notification System
		&quot;j-hui/fidget.nvim&quot;,
		opts = {
			-- options
		},
	},
	{
		&quot;elkowar/yuck.vim&quot;,
	},
}</file><file path="lua/plugins/lsp.lua">return {
	{
		&quot;neovim/nvim-lspconfig&quot;,
		dependencies = {
			&quot;saghen/blink.cmp&quot;,
			{
				&quot;folke/lazydev.nvim&quot;,
				ft = &quot;lua&quot;, -- only load on lua files
				opts = {
					library = {
						-- See the configuration section for more details
						-- Load luvit types when the `vim.uv` word is found
						{ path = &quot;${3rd}/luv/library&quot;, words = { &quot;vim%.uv&quot; } },
					},
				},
			},
			{
				&quot;SmiteshP/nvim-navbuddy&quot;,
				dependencies = {
					&quot;SmiteshP/nvim-navic&quot;,
					&quot;MunifTanjim/nui.nvim&quot;,
				},
				opts = {
					window = {
						size = { width = &quot;100%&quot;, height = &quot;50%&quot; },
						position = &quot;100%&quot;,
						sections = {
							left = {
								size = &quot;15%&quot;,
							},
						},
					},
					lsp = { auto_attach = true },
				},
			},
		},
		opts = {
			servers = {
				lua_ls = {},
				gopls = {},
				basedpyright = {},
				bashls = {},
				ts_ls = {},
				qmlls = {},
				cssls = {},
				tailwindcss = {},
				rust_analyzer = {},
			},
		},
		config = function(_, opts)
			local lspconfig = require(&quot;lspconfig&quot;)
			local util = require(&quot;lspconfig.util&quot;)

			if opts.servers.phpactor then
				opts.servers.phpactor.root_dir =
					util.root_pattern(&quot;.git&quot;, &quot;composer.json&quot;, &quot;.phpactor.json&quot;, &quot;.phpactor.yml&quot;)
			end

			for server, config in pairs(opts.servers) do
				if type(config) ~= &quot;table&quot; then
					config = {}
				end

				config.capabilities = require(&quot;blink.cmp&quot;).get_lsp_capabilities(config.capabilities)
				lspconfig[server].setup(config)
			end
		end,
	},
}</file><file path="lua/plugins/lualine.lua">return {

	{
		&quot;nvim-lualine/lualine.nvim&quot;,
		dependencies = { &quot;nvim-tree/nvim-web-devicons&quot; },
		opts = {
			options = {
				icons_enabled = true,
				theme = &quot;auto&quot;,
				component_separators = { left = &quot;&quot;, right = &quot;&quot; },
				section_separators = { left = &quot;&quot;, right = &quot;&quot; },
				disabled_filetypes = {
					statusline = {},
					winbar = {},
				},
				ignore_focus = {},
				always_divide_middle = true,
				always_show_tabline = false,
				globalstatus = true,
				refresh = {
					statusline = 100,
					tabline = 100,
					winbar = 100,
				},
			},
			sections = {
				lualine_a = { &quot;mode&quot; },
				lualine_b = {},
				lualine_c = {
					{
						&quot;filetype&quot;,
						icon_only = true,
						separator = &quot;&quot;,
						padding = 1,
						icon = { align = &quot;right&quot; },
					},
					{
						&quot;filename&quot;,
						path = 1,
						padding = 0,
						separator = &quot;&quot;,
					},
				},
				lualine_x = { &quot;diff&quot;, &quot;diagnostics&quot; },
				lualine_y = { &quot;lsp_status&quot; },
				lualine_z = { &quot;&quot; },
			},
			inactive_sections = {
				lualine_a = {},
				lualine_b = {},
				lualine_c = { &quot;filename&quot; },
				lualine_x = { &quot;location&quot; },
				lualine_y = {},
				lualine_z = {},
			},

			inactive_winbar = {},
			extensions = {},
		},
	},
}</file><file path="lua/plugins/mini.lua">return {
	-- Mini Nvim
	{ &quot;echasnovski/mini.nvim&quot;, version = false },

	-- File explorer (this works properly with oil unlike nvim-tree)
	-- {
	-- 	&quot;echasnovski/mini.files&quot;,
	-- 	config = function()
	-- 		local MiniFiles = require(&quot;mini.files&quot;)
	-- 		MiniFiles.setup({
	-- 			mappings = {
	-- 				go_in = &quot;l&quot;,
	-- 				go_in_plus = &quot;&lt;CR&gt;&quot;,
	-- 				go_out_plus = &quot;-&quot;,
	-- 				go_out = &quot;h&quot;,
	-- 			},
	-- 		})
	-- 		vim.keymap.set(&quot;n&quot;, &quot;&lt;C-n&gt;&quot;, function()
	-- 			if not MiniFiles.close() then
	-- 				MiniFiles.open()
	-- 			end
	-- 		end, { desc = &quot;Toggle mini file explorer&quot; })
	--
	-- 		vim.keymap.set(&quot;n&quot;, &quot;&lt;leader&gt;ef&quot;, function()
	-- 			MiniFiles.open(vim.api.nvim_buf_get_name(0), false)
	-- 			MiniFiles.reveal_cwd()
	-- 		end, { desc = &quot;Toggle into currently opened file&quot; })
	-- 	end,
	-- },
	-- Surround
	{
		&quot;echasnovski/mini.surround&quot;,
		event = { &quot;BufReadPre&quot;, &quot;BufNewFile&quot; },
		opts = {
			-- Add custom surroundings to be used on top of builtin ones. For more
			-- information with examples, see `:h MiniSurround.config`.
			custom_surroundings = nil,

			-- Duration (in ms) of highlight when calling `MiniSurround.highlight()`
			highlight_duration = 300,

			-- Module mappings. Use `&apos;&apos;` (empty string) to disable one.
			-- INFO:
			-- saiw surround with no whitespace
			-- saw surround with whitespace
			mappings = {
				add = &quot;sa&quot;, -- Add surrounding in Normal and Visual modes
				delete = &quot;ds&quot;, -- Delete surrounding
				find = &quot;sf&quot;, -- Find surrounding (to the right)
				find_left = &quot;sF&quot;, -- Find surrounding (to the left)
				highlight = &quot;sh&quot;, -- Highlight surrounding
				replace = &quot;sr&quot;, -- Replace surrounding
				update_n_lines = &quot;sn&quot;, -- Update `n_lines`

				suffix_last = &quot;l&quot;, -- Suffix to search with &quot;prev&quot; method
				suffix_next = &quot;n&quot;, -- Suffix to search with &quot;next&quot; method
			},

			-- Number of lines within which surrounding is searched
			n_lines = 20,

			-- Whether to respect selection type:
			-- - Place surroundings on separate lines in linewise mode.
			-- - Place surroundings on each line in blockwise mode.
			respect_selection_type = false,

			-- How to search for surrounding (first inside current line, then inside
			-- neighborhood). One of &apos;cover&apos;, &apos;cover_or_next&apos;, &apos;cover_or_prev&apos;,
			-- &apos;cover_or_nearest&apos;, &apos;next&apos;, &apos;prev&apos;, &apos;nearest&apos;. For more details,
			-- see `:h MiniSurround.config`.
			search_method = &quot;cover&quot;,

			-- Whether to disable showing non-error feedback
			silent = false,
		},
	},
	-- Split &amp; join
	{
		&quot;echasnovski/mini.splitjoin&quot;,
		config = function()
			local miniSplitJoin = require(&quot;mini.splitjoin&quot;)
			miniSplitJoin.setup({
				mappings = { toggle = &quot;&quot; }, -- Disable default mapping
			})
			vim.keymap.set({ &quot;n&quot;, &quot;x&quot; }, &quot;sj&quot;, function()
				miniSplitJoin.join()
			end, { desc = &quot;Join arguments&quot; })
			vim.keymap.set({ &quot;n&quot;, &quot;x&quot; }, &quot;sk&quot;, function()
				miniSplitJoin.split()
			end, { desc = &quot;Split arguments&quot; })
		end,
	},
}</file><file path="lua/plugins/render-markdown.lua">return {
  &quot;MeanderingProgrammer/render-markdown.nvim&quot;,
  enabled = true,
  dependencies = {
    &quot;nvim-treesitter/nvim-treesitter&quot;,
    &quot;nvim-tree/nvim-web-devicons&quot;,
  },
  ---@module &apos;render-markdown&apos;
  -- ft = { &quot;markdown&quot;, &quot;norg&quot;, &quot;rmd&quot;, &quot;org&quot; },
  init = function()
    -- Define colors
    local color1_bg = &quot;#ff757f&quot;
    local color2_bg = &quot;#4fd6be&quot;
    local color3_bg = &quot;#7dcfff&quot;
    local color4_bg = &quot;#ff9e64&quot;
    local color5_bg = &quot;#7aa2f7&quot;
    local color6_bg = &quot;#c0caf5&quot;
    local color_fg = &quot;#1F2335&quot;
    -- -- Heading background
    vim.cmd(string.format([[highlight Headline1Bg guifg=%s guibg=%s gui=bold]], color_fg, color1_bg))
    vim.cmd(string.format([[highlight Headline2Bg guifg=%s guibg=%s gui=bold]], color_fg, color2_bg))
    vim.cmd(string.format([[highlight Headline3Bg guifg=%s guibg=%s gui=bold]], color_fg, color3_bg))
    vim.cmd(string.format([[highlight Headline4Bg guifg=%s guibg=%s gui=bold]], color_fg, color4_bg))
    vim.cmd(string.format([[highlight Headline5Bg guifg=%s guibg=%s gui=bold]], color_fg, color5_bg))
    vim.cmd(string.format([[highlight Headline6Bg guifg=%s guibg=%s gui=bold]], color_fg, color6_bg))

    -- Heading fg
    -- vim.cmd(string.format([[highlight Headline1Fg guifg=%s gui=bold]], colors.color1_bg))
    -- vim.cmd(string.format([[highlight Headline2Fg guifg=%s gui=bold]], colors.color2_bg))
    -- vim.cmd(string.format([[highlight Headline3Fg guifg=%s gui=bold]], colors.color3_bg))
    -- vim.cmd(string.format([[highlight Headline4Fg guifg=%s gui=bold]], colors.color4_bg))
    -- vim.cmd(string.format([[highlight Headline5Fg guifg=%s gui=bold]], colors.color5_bg))
    -- vim.cmd(string.format([[highlight Headline6Fg guifg=%s gui=bold]], colors.color6_bg))
  end,
  opts = {
    heading = {
      sign = false,
      icons = { &quot;󰎤 &quot;, &quot;󰎧 &quot;, &quot;󰎪 &quot;, &quot;󰎭 &quot;, &quot;󰎱 &quot;, &quot;󰎳 &quot; },
      backgrounds = {
        &quot;Headline1Bg&quot;,
        &quot;Headline2Bg&quot;,
        &quot;Headline3Bg&quot;,
        &quot;Headline4Bg&quot;,
        &quot;Headline5Bg&quot;,
        &quot;Headline6Bg&quot;,
      },
      foregrounds = {
        &quot;Headline1Fg&quot;,
        &quot;Headline2Fg&quot;,
        &quot;Headline3Fg&quot;,
        &quot;Headline4Fg&quot;,
        &quot;Headline5Fg&quot;,
        &quot;Headline6Fg&quot;,
      },
    },
    code = {
      sign = false,
      width = &quot;block&quot;,
      right_pad = 1,
    },
    bullet = {
      -- Turn on / off list bullet rendering
      enabled = true,
    },
    -- checkbox = {
    --     -- Turn on / off checkbox state rendering
    --     enabled = true,
    --     -- Determines how icons fill the available space:
    --     --  inline:  underlying text is concealed resulting in a left aligned icon
    --     --  overlay: result is left padded with spaces to hide any additional text
    --     position = &quot;inline&quot;,
    --     unchecked = {
    --         -- Replaces &apos;[ ]&apos; of &apos;task_list_marker_unchecked&apos;
    --         icon = &quot;   󰄱 &quot;,
    --         -- Highlight for the unchecked icon
    --         highlight = &quot;RenderMarkdownUnchecked&quot;,
    --         -- Highlight for item associated with unchecked checkbox
    --         scope_highlight = nil,
    --     },
    --     checked = {
    --         -- Replaces &apos;[x]&apos; of &apos;task_list_marker_checked&apos;
    --         icon = &quot;   󰱒 &quot;,
    --         -- Highlight for the checked icon
    --         highlight = &quot;RenderMarkdownChecked&quot;,
    --         -- Highlight for item associated with checked checkbox
    --         scope_highlight = nil,
    --     },
    -- },
  },
}</file><file path="lua/plugins/snacks.lua">return {
	-- HACK: docs @ https://github.com/folke/snacks.nvim/blob/main/docs
	{
		&quot;folke/snacks.nvim&quot;,
		priority = 1000,
		lazy = false,
		-- NOTE: Options
		opts = {
			styles = {
				input = {
					keys = {
						n_esc = { &quot;&lt;C-c&gt;&quot;, { &quot;cmp_close&quot;, &quot;cancel&quot; }, mode = &quot;n&quot;, expr = true },
						i_esc = { &quot;&lt;C-c&gt;&quot;, { &quot;cmp_close&quot;, &quot;stopinsert&quot; }, mode = &quot;i&quot;, expr = true },
					},
				},
			},
			-- Snacks Modules
			input = {
				enabled = true,
			},
			quickfile = {
				enabled = true,
				exclude = { &quot;latex&quot; },
			},
			-- HACK: read picker docs @ https://github.com/folke/snacks.nvim/blob/main/docs/picker.md
			picker = {
				enabled = true,
				matchers = {
					frecency = true,
					cwd_bonus = false,
				},
				formatters = {
					file = {
						filename_first = false,
						filename_only = false,
						icon_width = 2,
					},
				},
				layout = {
					-- presets options : &quot;default&quot; , &quot;ivy&quot; , &quot;ivy-split&quot; , &quot;telescope&quot; , &quot;vscode&quot;, &quot;select&quot; , &quot;sidebar&quot;
					-- override picker layout in keymaps function as a param below
					preset = &quot;telescope&quot;, -- defaults to this layout unless overidden
					cycle = false,
				},
				layouts = {
					select = {
						preview = false,
						layout = {
							backdrop = false,
							width = 0.6,
							min_width = 80,
							height = 0.4,
							min_height = 10,
							box = &quot;vertical&quot;,
							border = &quot;rounded&quot;,
							title = &quot;{title}&quot;,
							title_pos = &quot;center&quot;,
							{ win = &quot;input&quot;, height = 1, border = &quot;bottom&quot; },
							{ win = &quot;list&quot;, border = &quot;none&quot; },
							{ win = &quot;preview&quot;, title = &quot;{preview}&quot;, width = 0.6, height = 0.4, border = &quot;top&quot; },
						},
					},
					telescope = {
						reverse = true, -- set to false for search bar to be on top
						layout = {
							box = &quot;horizontal&quot;,
							backdrop = false,
							width = 0.8,
							height = 0.9,
							border = &quot;none&quot;,
							{
								box = &quot;vertical&quot;,
								{ win = &quot;list&quot;, title = &quot; Results &quot;, title_pos = &quot;center&quot;, border = &quot;rounded&quot; },
								{
									win = &quot;input&quot;,
									height = 1,
									border = &quot;rounded&quot;,
									title = &quot;{title} {live} {flags}&quot;,
									title_pos = &quot;center&quot;,
								},
							},
							{
								win = &quot;preview&quot;,
								title = &quot;{preview:Preview}&quot;,
								width = 0.50,
								border = &quot;rounded&quot;,
								title_pos = &quot;center&quot;,
							},
						},
					},
					ivy = {
						layout = {
							box = &quot;vertical&quot;,
							backdrop = false,
							width = 0,
							height = 0.4,
							position = &quot;bottom&quot;,
							border = &quot;top&quot;,
							title = &quot; {title} {live} {flags}&quot;,
							title_pos = &quot;left&quot;,
							{ win = &quot;input&quot;, height = 1, border = &quot;bottom&quot; },
							{
								box = &quot;horizontal&quot;,
								{ win = &quot;list&quot;, border = &quot;none&quot; },
								{ win = &quot;preview&quot;, title = &quot;{preview}&quot;, width = 0.5, border = &quot;left&quot; },
							},
						},
					},
				},
			},
			image = {
				enabled = true,
				doc = {
					float = true, -- show image on cursor hover
					inline = false, -- show image inline
					max_width = 50,
					max_height = 30,
					wo = {
						wrap = false,
					},
				},
				convert = {
					notify = true,
					command = &quot;magick&quot;,
				},
				img_dirs = {
					&quot;img&quot;,
					&quot;images&quot;,
					&quot;assets&quot;,
					&quot;static&quot;,
					&quot;public&quot;,
					&quot;media&quot;,
					&quot;attachments&quot;,
					&quot;Archives/All-Vault-Images/&quot;,
					&quot;~/Library&quot;,
					&quot;~/Downloads&quot;,
				},
			},
			dashboard = {
				enabled = false,
				sections = {
					{ section = &quot;header&quot; },
					{ section = &quot;keys&quot;, gap = 1, padding = 1 },
					{ section = &quot;startup&quot; },
					{
						section = &quot;terminal&quot;,
						cmd = &quot;chafa --format symbols ~/Desktop/Others/profiles.jpg&quot;,
						random = false,
						pane = 2,
						height = 28,
					},
				},
			},
		},
		-- NOTE: Keymaps
		keys = {
			{
				&quot;&lt;leader&gt;lg&quot;,
				function()
					require(&quot;snacks&quot;).lazygit()
				end,
				desc = &quot;Lazygit&quot;,
			},
			{
				&quot;&lt;leader&gt;gl&quot;,
				function()
					require(&quot;snacks&quot;).lazygit.log()
				end,
				desc = &quot;Lazygit Logs&quot;,
			},
			{
				&quot;&lt;leader&gt;rN&quot;,
				function()
					require(&quot;snacks&quot;).rename.rename_file()
				end,
				desc = &quot;Fast Rename Current File&quot;,
			},
			{
				&quot;&lt;leader&gt;dB&quot;,
				function()
					require(&quot;snacks&quot;).bufdelete()
				end,
				desc = &quot;Delete or Close Buffer  (Confirm)&quot;,
			},

			-- Snacks Picker
			{
				&quot;&lt;leader&gt;pf&quot;,
				function()
					require(&quot;snacks&quot;).picker.files()
				end,
				desc = &quot;Find Files (Snacks Picker)&quot;,
			},
			{
				&quot;&lt;leader&gt;pc&quot;,
				function()
					require(&quot;snacks&quot;).picker.files({ cwd = vim.fn.stdpath(&quot;config&quot;) })
				end,
				desc = &quot;Find Config File&quot;,
			},
			{
				&quot;&lt;leader&gt;ps&quot;,
				function()
					require(&quot;snacks&quot;).picker.grep()
				end,
				desc = &quot;Grep word&quot;,
			},
			{
				&quot;&lt;leader&gt;pws&quot;,
				function()
					require(&quot;snacks&quot;).picker.grep_word()
				end,
				desc = &quot;Search Visual selection or Word&quot;,
				mode = { &quot;n&quot;, &quot;x&quot; },
			},
			{
				&quot;&lt;leader&gt;pk&quot;,
				function()
					require(&quot;snacks&quot;).picker.keymaps({ layout = &quot;ivy&quot; })
				end,
				desc = &quot;Search Keymaps (Snacks Picker)&quot;,
			},

			-- Git Stuff
			{
				&quot;&lt;leader&gt;gbr&quot;,
				function()
					require(&quot;snacks&quot;).picker.git_branches({ layout = &quot;select&quot; })
				end,
				desc = &quot;Pick and Switch Git Branches&quot;,
			},

			-- Other Utils
			{
				&quot;&lt;leader&gt;th&quot;,
				function()
					require(&quot;snacks&quot;).picker.colorschemes({ layout = &quot;ivy&quot; })
				end,
				desc = &quot;Pick Color Schemes&quot;,
			},
			{
				&quot;&lt;leader&gt;vh&quot;,
				function()
					require(&quot;snacks&quot;).picker.help()
				end,
				desc = &quot;Help Pages&quot;,
			},
		},
	},
	-- NOTE: todo comments w/ snacks
	{
		&quot;folke/todo-comments.nvim&quot;,
		dependencies = { &quot;nvim-lua/plenary.nvim&quot; },
		event = { &quot;BufReadPre&quot;, &quot;BufNewFile&quot; },
		optional = true,
		keys = {
			{
				&quot;&lt;leader&gt;pt&quot;,
				function()
					require(&quot;snacks&quot;).picker.todo_comments()
				end,
				desc = &quot;Todo&quot;,
			},
			{
				&quot;&lt;leader&gt;pT&quot;,
				function()
					require(&quot;snacks&quot;).picker.todo_comments({ keywords = { &quot;TODO&quot;, &quot;FIX&quot;, &quot;FIXME&quot; } })
				end,
				desc = &quot;Todo/Fix/Fixme&quot;,
			},
		},
	},
}</file><file path="lua/plugins/telescope.lua">return {
	&quot;nvim-telescope/telescope.nvim&quot;,
	tag = &quot;0.1.8&quot;,
	dependencies = { &quot;nvim-lua/plenary.nvim&quot;, { &quot;nvim-telescope/telescope-fzf-native.nvim&quot;, build = &quot;make&quot; } },
	config = function()
		require(&quot;telescope&quot;).setup({
			pickers = {
				help_tags = {
					theme = &quot;ivy&quot;,
				},
				find_files = {
					theme = &quot;ivy&quot;,
				},
				git_files = {
					theme = &quot;ivy&quot;,
				},
				oldfiles = {
					theme = &quot;ivy&quot;,
				},
				live_grep = {
					theme = &quot;ivy&quot;,
				},
			},
		})
	end,
}</file><file path="lua/plugins/theme.lua">return {
	{
		&quot;rebelot/kanagawa.nvim&quot;,
		priority = 1000,
		opts = {
			transparent = false, -- do not set background color
		},
		config = function()
			-- Themes
			vim.o.background = &quot;dark&quot; -- or &quot;light&quot; for light mode
			vim.cmd([[colorscheme kanagawa]])
		end,
	},
}</file><file path="lua/plugins/treesitter.lua">return {
  {
    &quot;nvim-treesitter/nvim-treesitter&quot;,
    build = &quot;:TSUpdate&quot;,
    config = function()
      require(&quot;nvim-treesitter.configs&quot;).setup {
        -- A list of parser names, or &quot;all&quot; (the listed parsers MUST always be installed)
        ensure_installed = { &quot;c&quot;, &quot;lua&quot;, &quot;vim&quot;, &quot;vimdoc&quot;, &quot;query&quot;, &quot;markdown&quot;, &quot;markdown_inline&quot; },

        -- Automatically install missing parsers when entering buffer
        -- Recommendation: set to false if you don&apos;t have `tree-sitter` CLI installed locally
        auto_install = false,

        highlight = {
          enable = true,

          -- NOTE: these are the names of the parsers and not the filetype. (for example if you want to
          -- disable highlighting for the `tex` filetype, you need to include `latex` in this list as this is
          -- the name of the parser)
          -- list of language that will be disabled
          -- disable = { &quot;c&quot;, &quot;rust&quot; },

          -- Or use a function for more flexibility, e.g. to disable slow treesitter highlight for large files
          disable = function(lang, buf)
            local max_filesize = 100 * 1024 -- 100 KB
            local ok, stats = pcall(vim.loop.fs_stat, vim.api.nvim_buf_get_name(buf))
            if ok and stats and stats.size &gt; max_filesize then
              return true
            end
          end,
          additional_vim_regex_highlighting = false,
        },
      }
    end,
  },
  -- NOTE: js,ts,jsx,tsx Auto Close Tags
  {
    &quot;windwp/nvim-ts-autotag&quot;,
    ft = { &quot;html&quot;, &quot;xml&quot;, &quot;javascript&quot;, &quot;typescript&quot;, &quot;javascriptreact&quot;, &quot;typescriptreact&quot;, &quot;svelte&quot; },
    config = function()
      -- Independent nvim-ts-autotag setup
      require(&quot;nvim-ts-autotag&quot;).setup {
        opts = {
          enable_close = true, -- Auto-close tags
          enable_rename = true, -- Auto-rename pairs
          enable_close_on_slash = false, -- Disable auto-close on trailing `&lt;/`
        },
        per_filetype = {
          [&quot;html&quot;] = {
            enable_close = true, -- Disable auto-closing for HTML
          },
          [&quot;typescriptreact&quot;] = {
            enable_close = true, -- Explicitly enable auto-closing (optional, defaults to `true`)
          },
        },
      }
    end,
  },
}</file><file path="lua/plugins/trouble.lua">return {
	&quot;folke/trouble.nvim&quot;,
	dependencies = { &quot;nvim-tree/nvim-web-devicons&quot;, &quot;folke/todo-comments.nvim&quot; },
	opts = {
		focus = true,
	},
	cmd = &quot;Trouble&quot;,
	keys = {
		{ &quot;&lt;leader&gt;xx&quot;, &quot;&lt;cmd&gt;Trouble diagnostics toggle&lt;CR&gt;&quot;, desc = &quot;Open trouble workspace diagnostics&quot; },
		{
			&quot;&lt;leader&gt;xd&quot;,
			&quot;&lt;cmd&gt;Trouble diagnostics toggle filter.buf=0&lt;CR&gt;&quot;,
			desc = &quot;Open trouble document diagnostics&quot;,
		},
		{ &quot;&lt;leader&gt;xq&quot;, &quot;&lt;cmd&gt;Trouble quickfix toggle&lt;CR&gt;&quot;, desc = &quot;Open trouble quickfix list&quot; },
		{ &quot;&lt;leader&gt;xl&quot;, &quot;&lt;cmd&gt;Trouble loclist toggle&lt;CR&gt;&quot;, desc = &quot;Open trouble location list&quot; },
		{ &quot;&lt;leader&gt;xt&quot;, &quot;&lt;cmd&gt;Trouble todo toggle&lt;CR&gt;&quot;, desc = &quot;Open todos in trouble&quot; },
	},
}</file><file path="lua/plugins/undotree.lua">return {
  &quot;mbbill/undotree&quot;,
  config = function()
    vim.keymap.set(&quot;n&quot;, &quot;&lt;leader&gt;u&quot;, vim.cmd.UndotreeToggle)
  end,
}</file><file path="lua/plugins/vim.maximizer.lua">return {
  &quot;szw/vim-maximizer&quot;,
  keys = {
    { &quot;&lt;leader&gt;sm&quot;, &quot;&lt;cmd&gt;MaximizerToggle&lt;CR&gt;&quot;, desc = &quot;Maximize/minimize a split&quot; },
  },
}</file><file path="lua/lazy_setup.lua">-- Bootstrap lazy.nvim
local lazypath = vim.fn.stdpath(&quot;data&quot;) .. &quot;/lazy/lazy.nvim&quot;
if not (vim.uv or vim.loop).fs_stat(lazypath) then
	local lazyrepo = &quot;https://github.com/folke/lazy.nvim.git&quot;
	local out = vim.fn.system({ &quot;git&quot;, &quot;clone&quot;, &quot;--filter=blob:none&quot;, &quot;--branch=stable&quot;, lazyrepo, lazypath })
	if vim.v.shell_error ~= 0 then
		vim.api.nvim_echo({
			{ &quot;Failed to clone lazy.nvim:\n&quot;, &quot;ErrorMsg&quot; },
			{ out, &quot;WarningMsg&quot; },
			{ &quot;\nPress any key to exit...&quot; },
		}, true, {})
		vim.fn.getchar()
		os.exit(1)
	end
end
vim.opt.rtp:prepend(lazypath)

-- Make sure to setup `mapleader` and `maplocalleader` before
-- loading lazy.nvim so that mappings are correct.
-- This is also a good place to setup other settings (vim.opt)
vim.g.mapleader = &quot; &quot;
vim.g.maplocalleader = &quot;\\&quot;

-- Setup lazy.nvim
require(&quot;lazy&quot;).setup({
	spec = {
		{ import = &quot;plugins&quot; },
	},
	{
		checker = {
			enabled = true,
			notify = false,
		},
		change_detection = {
			notify = false,
		},
	},
})</file><file path="plugin/floaterminal.lua">vim.keymap.set(&quot;t&quot;, &quot;&lt;esc&gt;&lt;esc&gt;&quot;, &quot;&lt;c-\\&gt;&lt;c-n&gt;&quot;)

local state = {
  floating = {
    buf = -1,
    win = -1,
  }
}

local function create_floating_window(opts)
  opts = opts or {}
  local width = opts.width or math.floor(vim.o.columns * 0.8)
  local height = opts.height or math.floor(vim.o.lines * 0.8)

  -- Calculate the position to center the window
  local col = math.floor((vim.o.columns - width) / 2)
  local row = math.floor((vim.o.lines - height) / 2)

  -- Create a buffer
  local buf = nil
  if vim.api.nvim_buf_is_valid(opts.buf) then
    buf = opts.buf
  else
    buf = vim.api.nvim_create_buf(false, true) -- No file, scratch buffer
  end

  -- Define window configuration
  local win_config = {
    relative = &quot;editor&quot;,
    width = width,
    height = height,
    col = col,
    row = row,
    style = &quot;minimal&quot;, -- No borders or extra UI elements
    border = &quot;rounded&quot;,
  }

  -- Create the floating window
  local win = vim.api.nvim_open_win(buf, true, win_config)

  return { buf = buf, win = win }
end

local toggle_terminal = function()
  if not vim.api.nvim_win_is_valid(state.floating.win) then
    state.floating = create_floating_window { buf = state.floating.buf }
    if vim.bo[state.floating.buf].buftype ~= &quot;terminal&quot; then
      vim.cmd.terminal()
    end
  else
    vim.api.nvim_win_hide(state.floating.win)
  end
end

-- Example usage:
-- Create a floating window with default dimensions
vim.api.nvim_create_user_command(&quot;Floaterminal&quot;, toggle_terminal, {})
vim.keymap.set({&quot;n&quot;, &quot;t&quot;}, &quot;&lt;space&gt;ft&quot;, toggle_terminal)</file><file path="init.lua">require(&quot;config.core.options&quot;)
require(&quot;lazy_setup&quot;)
require(&quot;config.core.keymaps&quot;)
require(&quot;config.core.autocmds&quot;)</file><file path="lazy-lock.json">{
  &quot;LuaSnip&quot;: { &quot;branch&quot;: &quot;master&quot;, &quot;commit&quot;: &quot;eda5be8f0ce9816278671f0b578cdbb8b762c701&quot; },
  &quot;avante.nvim&quot;: { &quot;branch&quot;: &quot;main&quot;, &quot;commit&quot;: &quot;39ac64aca65d66d05409e712fac666eb298561f5&quot; },
  &quot;blink-cmp-avante&quot;: { &quot;branch&quot;: &quot;master&quot;, &quot;commit&quot;: &quot;5cf0854b065073083de72d9a988cff1c4b419148&quot; },
  &quot;blink.cmp&quot;: { &quot;branch&quot;: &quot;main&quot;, &quot;commit&quot;: &quot;9bcb14b43852a6f2bfd5ac9ef29cb5cf09b1b39b&quot; },
  &quot;breadcrumbs.nvim&quot;: { &quot;branch&quot;: &quot;master&quot;, &quot;commit&quot;: &quot;9f764278784ce2f10dbe2f555ba14be2451d36a0&quot; },
  &quot;conform.nvim&quot;: { &quot;branch&quot;: &quot;master&quot;, &quot;commit&quot;: &quot;973f3cb73887d510321653044791d7937c7ec0fa&quot; },
  &quot;copilot.lua&quot;: { &quot;branch&quot;: &quot;master&quot;, &quot;commit&quot;: &quot;46f4b7d026cba9497159dcd3e6aa61a185cb1c48&quot; },
  &quot;dressing.nvim&quot;: { &quot;branch&quot;: &quot;master&quot;, &quot;commit&quot;: &quot;2d7c2db2507fa3c4956142ee607431ddb2828639&quot; },
  &quot;fidget.nvim&quot;: { &quot;branch&quot;: &quot;main&quot;, &quot;commit&quot;: &quot;d9ba6b7bfe29b3119a610892af67602641da778e&quot; },
  &quot;friendly-snippets&quot;: { &quot;branch&quot;: &quot;main&quot;, &quot;commit&quot;: &quot;572f5660cf05f8cd8834e096d7b4c921ba18e175&quot; },
  &quot;fzf-lua&quot;: { &quot;branch&quot;: &quot;main&quot;, &quot;commit&quot;: &quot;9be1552e7de8d72fa280b87ede3642e8bfb4c998&quot; },
  &quot;harpoon&quot;: { &quot;branch&quot;: &quot;harpoon2&quot;, &quot;commit&quot;: &quot;ed1f853847ffd04b2b61c314865665e1dadf22c7&quot; },
  &quot;hop.nvim&quot;: { &quot;branch&quot;: &quot;master&quot;, &quot;commit&quot;: &quot;08ddca799089ab96a6d1763db0b8adc5320bf050&quot; },
  &quot;img-clip.nvim&quot;: { &quot;branch&quot;: &quot;main&quot;, &quot;commit&quot;: &quot;d8b6b030672f9f551a0e3526347699985a779d93&quot; },
  &quot;kanagawa.nvim&quot;: { &quot;branch&quot;: &quot;master&quot;, &quot;commit&quot;: &quot;debe91547d7fb1eef34ce26a5106f277fbfdd109&quot; },
  &quot;lazy.nvim&quot;: { &quot;branch&quot;: &quot;main&quot;, &quot;commit&quot;: &quot;6c3bda4aca61a13a9c63f1c1d1b16b9d3be90d7a&quot; },
  &quot;lazydev.nvim&quot;: { &quot;branch&quot;: &quot;main&quot;, &quot;commit&quot;: &quot;2367a6c0a01eb9edb0464731cc0fb61ed9ab9d2c&quot; },
  &quot;lspkind.nvim&quot;: { &quot;branch&quot;: &quot;master&quot;, &quot;commit&quot;: &quot;d79a1c3299ad0ef94e255d045bed9fa26025dab6&quot; },
  &quot;lualine.nvim&quot;: { &quot;branch&quot;: &quot;master&quot;, &quot;commit&quot;: &quot;a94fc68960665e54408fe37dcf573193c4ce82c9&quot; },
  &quot;mini.nvim&quot;: { &quot;branch&quot;: &quot;main&quot;, &quot;commit&quot;: &quot;48f48e4b3f317e9da34ee7a01958b4c5018e2d34&quot; },
  &quot;mini.pick&quot;: { &quot;branch&quot;: &quot;main&quot;, &quot;commit&quot;: &quot;ebe3dacb352bb054607e5ed0fd461e2251a7a280&quot; },
  &quot;mini.splitjoin&quot;: { &quot;branch&quot;: &quot;main&quot;, &quot;commit&quot;: &quot;ebde0e2a33ec983ade3b2bb3c495b3751b458e4c&quot; },
  &quot;mini.surround&quot;: { &quot;branch&quot;: &quot;main&quot;, &quot;commit&quot;: &quot;1a2b59c77a0c4713a5bd8972da322f842f4821b1&quot; },
  &quot;nui.nvim&quot;: { &quot;branch&quot;: &quot;main&quot;, &quot;commit&quot;: &quot;de740991c12411b663994b2860f1a4fd0937c130&quot; },
  &quot;nvim-autopairs&quot;: { &quot;branch&quot;: &quot;master&quot;, &quot;commit&quot;: &quot;23320e75953ac82e559c610bec5a90d9c6dfa743&quot; },
  &quot;nvim-cmp&quot;: { &quot;branch&quot;: &quot;main&quot;, &quot;commit&quot;: &quot;b5311ab3ed9c846b585c0c15b7559be131ec4be9&quot; },
  &quot;nvim-colorizer.lua&quot;: { &quot;branch&quot;: &quot;master&quot;, &quot;commit&quot;: &quot;a065833f35a3a7cc3ef137ac88b5381da2ba302e&quot; },
  &quot;nvim-lspconfig&quot;: { &quot;branch&quot;: &quot;master&quot;, &quot;commit&quot;: &quot;7fac9025a967a4d0846660f751cd392fac6bb788&quot; },
  &quot;nvim-navbuddy&quot;: { &quot;branch&quot;: &quot;master&quot;, &quot;commit&quot;: &quot;a34786c77a528519f6b8a142db7609f6e387842d&quot; },
  &quot;nvim-navic&quot;: { &quot;branch&quot;: &quot;master&quot;, &quot;commit&quot;: &quot;f887d794a0f4594882814d7780980a949200a238&quot; },
  &quot;nvim-tree.lua&quot;: { &quot;branch&quot;: &quot;master&quot;, &quot;commit&quot;: &quot;b0b49552c9462900a882fe772993b01d780445fe&quot; },
  &quot;nvim-treesitter&quot;: { &quot;branch&quot;: &quot;master&quot;, &quot;commit&quot;: &quot;42fc28ba918343ebfd5565147a42a26580579482&quot; },
  &quot;nvim-treesitter-context&quot;: { &quot;branch&quot;: &quot;master&quot;, &quot;commit&quot;: &quot;59f318a65d42a5c4037796886a8874fd57f774fc&quot; },
  &quot;nvim-ts-autotag&quot;: { &quot;branch&quot;: &quot;main&quot;, &quot;commit&quot;: &quot;a1d526af391f6aebb25a8795cbc05351ed3620b5&quot; },
  &quot;nvim-web-devicons&quot;: { &quot;branch&quot;: &quot;master&quot;, &quot;commit&quot;: &quot;19d6211c78169e78bab372b585b6fb17ad974e82&quot; },
  &quot;plenary.nvim&quot;: { &quot;branch&quot;: &quot;master&quot;, &quot;commit&quot;: &quot;857c5ac632080dba10aae49dba902ce3abf91b35&quot; },
  &quot;render-markdown.nvim&quot;: { &quot;branch&quot;: &quot;main&quot;, &quot;commit&quot;: &quot;3115ff748d6885fe1af349feb6b73de03eda8e12&quot; },
  &quot;snacks.nvim&quot;: { &quot;branch&quot;: &quot;main&quot;, &quot;commit&quot;: &quot;bc0630e43be5699bb94dadc302c0d21615421d93&quot; },
  &quot;telescope-fzf-native.nvim&quot;: { &quot;branch&quot;: &quot;main&quot;, &quot;commit&quot;: &quot;1f08ed60cafc8f6168b72b80be2b2ea149813e55&quot; },
  &quot;telescope.nvim&quot;: { &quot;branch&quot;: &quot;master&quot;, &quot;commit&quot;: &quot;a0bbec21143c7bc5f8bb02e0005fa0b982edc026&quot; },
  &quot;todo-comments.nvim&quot;: { &quot;branch&quot;: &quot;main&quot;, &quot;commit&quot;: &quot;304a8d204ee787d2544d8bc23cd38d2f929e7cc5&quot; },
  &quot;trouble.nvim&quot;: { &quot;branch&quot;: &quot;main&quot;, &quot;commit&quot;: &quot;85bedb7eb7fa331a2ccbecb9202d8abba64d37b3&quot; },
  &quot;undotree&quot;: { &quot;branch&quot;: &quot;master&quot;, &quot;commit&quot;: &quot;15d91b0afe04ea9ba5cd53e30190d1602af9a925&quot; },
  &quot;vim-maximizer&quot;: { &quot;branch&quot;: &quot;master&quot;, &quot;commit&quot;: &quot;2e54952fe91e140a2e69f35f22131219fcd9c5f1&quot; },
  &quot;which-key.nvim&quot;: { &quot;branch&quot;: &quot;main&quot;, &quot;commit&quot;: &quot;370ec46f710e058c9c1646273e6b225acf47cbed&quot; },
  &quot;yuck.vim&quot;: { &quot;branch&quot;: &quot;master&quot;, &quot;commit&quot;: &quot;9b5e0370f70cc30383e1dabd6c215475915fe5c3&quot; }
}</file></files></repomix>